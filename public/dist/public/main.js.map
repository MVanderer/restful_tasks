{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/tasks.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<h1>Restful Tasks API</h1>\\n<h2>{{ title[0] }}</h2>\\n\\n<p>{{ tasks }}</p>\\n\\n<ul>\\n  <li *ngFor=\\\"let task of tasks\\\">{{ task['title'] }} - {{ task['description'] }}</li>\\n</ul>\\n\\n<h2>{{ title [1] }}</h2>\\n<ul>\\n  <li *ngIf=\\\"long\\\">{{ tasks[2].title }} - {{ tasks[2].description }}</li>\\n</ul>\\n\\n\"","import { Component, OnInit } from '@angular/core';\nimport { TaskService } from './tasks.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  title = ['All the tasks','The third task'];\n  long=false;\n  tasks = [];\n  constructor(private _taskService: TaskService){}\n  \n  ngOnInit(): void {\n    console.log('hi');\n    this.getTasksFromService();\n  }\n\n  getTasksFromService(){\n    let tempObservable = this._taskService.getAllTasks();\n    tempObservable.subscribe(data => {\n      console.log(\"Here are the tasks: \", data);\n      for (let i in data){\n        this.tasks.push(data[i])\n      }\n      if (this.tasks.length>2){this.long=true}\n      //this.tasks = data['tasks'];\n      console.log(this.tasks);\n    });\n  }\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { TaskService } from './tasks.service';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { HttpClient } from 'selenium-webdriver/http';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n  ],\n  providers: [TaskService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskService {\n  constructor(private _http:HttpClient) {\n    this.getOneTask(\"5c094b2775c04ac5004f5820\");\n  }\n\n  getAllTasks(){\n    return this._http.get('/tasks');\n  }\n\n  getOneTask(id){\n    let tempObservable = this._http.get(`/tasks/${id}`);\n    tempObservable.subscribe(data => console.log(`Here is the tasks you asked for: `, data));\n  }\n\n  \n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}